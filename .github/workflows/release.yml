name: Build LiteUpper Desktop 

on:
  push:
    tags:
      - "v*"  

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Electron App
        run: npx electron-builder --publish never
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # ‚úÖ Install Java for Linux/macOS (Required for signing)
      - name: Install Java (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          sudo apt update && sudo apt install -y default-jre || brew install openjdk
        shell: bash

      # ‚úÖ Download and Install SSL.com CodeSignTool for Windows
      - name: Download and Install CodeSignTool for Windows
        if: runner.os == 'Windows'
        run: |
          $zipPath = "codesigner-windows.zip"
          $extractPath = "codesigner"

          # Remove old files
          Remove-Item -Force -ErrorAction SilentlyContinue $zipPath
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue $extractPath

          # ‚úÖ Download CodeSignTool
          Invoke-WebRequest -Uri "https://www.ssl.com/download/codesigntool-for-windows/" -OutFile $zipPath

          # ‚úÖ Extract ZIP
          New-Item -ItemType Directory -Path $extractPath -Force
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

          # ‚úÖ Verify batch file exists
          if (!(Test-Path "$extractPath\CodeSignTool.bat")) {
              Write-Host "‚ùå CodeSignTool.bat not found!"
              exit 1
          }

          # ‚úÖ Move to System32 for global access
          Move-Item -Path "$extractPath\CodeSignTool.bat" -Destination "C:\Windows\System32\" -Force
        shell: pwsh

      # ‚úÖ Download and Install SSL.com CodeSignTool for Linux/macOS
      - name: Download and Install CodeSignTool for Linux/macOS
        if: runner.os != 'Windows'
        run: |
          curl -o codesigner-linux.zip "https://www.ssl.com/download/codesigntool-for-linux-and-macos/"
          unzip codesigner-linux.zip -d codesigner
          chmod +x codesigner/CodeSignTool.sh
          sudo mv codesigner/CodeSignTool.sh /usr/local/bin/codesigntool
        shell: bash

      # ‚úÖ Debug Secrets
      - name: Debug Secrets (Safe Output)
        run: echo "Credentials loaded successfully"
        shell: bash  

      - name: Debug Directory Paths
        run: |
          echo "Checking if dist/signed directory exists..."
          if exist "..\dist\signed" (echo "Directory exists") else (echo "Creating directory" & mkdir "..\dist\signed")
          dir ..\dist\signed
        shell: cmd  

      # ‚úÖ Sign Windows Executable
      - name: Sign Windows Executable
        if: runner.os == 'Windows'
        run: |
          cd codesigner
          if not exist "..\dist\signed" mkdir "..\dist\signed"
          cmd.exe /c CodeSignTool.bat sign ^
            -username "${{ secrets.ES_USERNAME }}" ^
            -password "${{ secrets.ES_PASSWORD }}" ^
            -credential_id "${{ secrets.CREDENTIAL_ID }}" ^
            -totp_secret "${{ secrets.ES_TOTP_SECRET }}" ^
            -input_file_path "..\dist\LiteUpper.exe" ^
            -output_dir_path "..\dist\signed" ^
            -timestamp_url "http://ts.ssl.com"
        shell: cmd
      
      # ‚úÖ Debug Signed File Output (Windows)
      - name: Debug Signed File Output
        if: runner.os == 'Windows'
        run: |
          echo "Checking signed files..."
          dir dist\signed\
        shell: cmd
        env:
          ES_USERNAME: ${{ secrets.ES_USERNAME }}
          ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
          CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}
          ES_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}

      # ‚úÖ Sign Linux/macOS Executable
      - name: Sign Linux/macOS Executable
        if: runner.os != 'Windows'
        run: |
          codesigntool sign \
            --username "${{ secrets.ES_USERNAME }}" \
            --password "${{ secrets.ES_PASSWORD }}" \
            --credential_id "${{ secrets.CREDENTIAL_ID }}" \
            --totp_secret "${{ secrets.ES_TOTP_SECRET }}" \
            --file_path "dist/LiteUpper" \
            --output_path "dist/signed/" \
            --format "PEM" \
            --timestamp "http://timestamp.sectigo.com"
        shell: bash

      # ‚úÖ Upload Built and Signed Files
      - name: Upload Signed Files
        uses: actions/upload-artifact@v4
        with:
          name: LiteUpper-${{ matrix.os }}
          path: dist/signed/

      # ‚úÖ Publish to GitHub Releases
      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/signed/**
          body: "üöÄ New LiteUpper Release! Download the latest version below."
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
