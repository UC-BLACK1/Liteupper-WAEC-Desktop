name: Build and Sign LiteUpper Desktop

on:
  push:
    tags:
      - "v*"

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.set_versions.outputs.package_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get the version
        id: set_versions
        run: |
          echo "package_version=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

  build-linux-macos:
    needs: get-versions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Import GPG key
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Build Electron App
        run: npx electron-builder --publish never
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload Built Files
        uses: actions/upload-artifact@v4
        with:
          name: LiteUpper-${{ matrix.os }}
          path: dist/

      - name: Publish to GitHub Releases (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**
          body: "ðŸš€ New LiteUpper Release for ${{ matrix.os }}! Download below."
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  build-windows:
    needs: get-versions
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Checkout esigner-codesign repository
        uses: actions/checkout@v3
        with:
          repository: 'SSLcom/esigner-codesign'
          path: esigner-codesign

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            node-

      - name: Install Dependencies
        run: npm install

      - name: Build and Sign App (Windows)
        run: |
          npm run build
          npx electron-builder build --config electron-builder.js -p always
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          CODE_SIGN_SCRIPT_PATH: "${{ github.workspace }}\\esigner-codesign\\dist\\index.js"
          INPUT_COMMAND: "sign"
          INPUT_FILE_PATH: "${{ github.workspace }}\\dist\\LiteUpper Setup ${{ env.package_version }}.exe"
          INPUT_OVERRIDE: "true"
          INPUT_MALWARE_BLOCK: "false"
          INPUT_CLEAN_LOGS: "false"
          INPUT_JVM_MAX_MEMORY: "1024M"
          INPUT_ENVIRONMENT_NAME: "PROD"
          INPUT_USERNAME: ${{ secrets.ES_USERNAME }}
          INPUT_PASSWORD: ${{ secrets.ES_PASSWORD }}
          INPUT_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
          INPUT_CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: LiteUpper-windows
          path: dist/

      - name: Publish to GitHub Releases (Windows)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**
          body: "ðŸš€ New LiteUpper Release for Windows! Download below."
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
