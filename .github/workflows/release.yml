name: Build and Sign LiteUpper Desktop

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Import GPG key
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Build Electron App
        run: npx electron-builder --publish never
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload Built Files
        uses: actions/upload-artifact@v4
        with:
          name: LiteUpper-${{ matrix.os }}
          path: dist/
      
      - name: Publish to GitHub Releases
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**
          body: "🚀 New LiteUpper Release! Download the latest version below."
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}    

  sign-windows:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: LiteUpper-windows-latest
          path: dist/

      - name: Download and Extract CodeSignTool
        run: |
          Invoke-WebRequest -Uri "https://app.esigner.com/documents/3da50ef7-95ea-4b8b-b9c2-20122b641c4d/file" -OutFile codesigner.zip
          Expand-Archive -Path codesigner.zip -DestinationPath codesigner

          
      - name: Sign All EXEs
        shell: pwsh
        run: |
          if (Test-Path .\codesigner\CodeSignTool.bat) {
            Write-Host "✅ CodeSignTool.bat found"
          } else {
            Write-Host "❌ CodeSignTool.bat NOT FOUND"
            exit 1
          }
      
          $toolPath = Resolve-Path .\codesigner\CodeSignTool.bat
          Write-Host "Tool Path: $($toolPath.Path)"
          
          # Get the list of exe files in the dist directory
          $exeFiles = Get-ChildItem -Path dist -Filter *.exe -Recurse | Select-Object -ExpandProperty FullName
          Write-Host "Found EXEs:"
          $exeFiles | ForEach-Object { Write-Host $_ }
          
          foreach ($exe in $exeFiles) {
            Write-Host "Signing: $exe"
            
            # Create the full command string with proper escaping
            $cmd = """$($toolPath.Path)"" sign --username `"$env:ES_USERNAME`" --password `"$env:ES_PASSWORD`" --credential_id `"$env:CREDENTIAL_ID`" --otp `"$env:ES_TOTP_SECRET`" --input `"$exe`" --output `"$exe`""
            Write-Host "Running command: cmd.exe /c $cmd"
            
            # Execute the command with proper redirection of standard output and error
            $process = Start-Process cmd.exe -ArgumentList "/c $cmd" -PassThru -Wait -RedirectStandardOutput "stdout.txt" -RedirectStandardError "stderr.txt"
            $process.WaitForExit()
      
            # Check for any errors in the process exit code
            if ($process.ExitCode -ne 0) {
                Write-Host "Error during signing process. Exit Code: $($process.ExitCode)"
                Write-Host "Standard Output: $(Get-Content stdout.txt)"
                Write-Host "Standard Error: $(Get-Content stderr.txt)"
                exit 1
            }
          }
        env:
          ES_USERNAME: ${{ secrets.ES_USERNAME }}
          ES_PASSWORD: ${{ secrets.ES_PASSWORD }}
          CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}
          ES_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
      
        
        
        
      - name: Find Setup EXE for Release
        id: find_setup_exe
        run: |
          $setupExe = Get-ChildItem -Path dist -Filter "*Setup*.exe" -Recurse | Select-Object -First 1 -ExpandProperty FullName
          echo "SETUP_EXE=$setupExe" >> $env:GITHUB_ENV

      - name: Publish Setup EXE to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: ${{ env.SETUP_EXE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
